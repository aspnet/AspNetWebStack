<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <BuildTaskAssemblyReference Condition=" '$(BuildTaskAssemblyReference)' == '' And Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll') ">Microsoft.Build.Tasks.Core</BuildTaskAssemblyReference>
    <BuildTaskAssemblyReference Condition=" '$(BuildTaskAssemblyReference)' == '' And Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll') ">Microsoft.Build.Tasks.v$(MSBuildToolsVersion)</BuildTaskAssemblyReference>
    <BuildTaskAssemblyReference Condition=" '$(BuildTaskAssemblyReference)' == '' And Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll') ">Microsoft.Build.Tasks.v4.0</BuildTaskAssemblyReference>
    <!-- Know this file does not exist. But, error message will contain meaningful information. -->
    <BuildTaskAssemblyReference Condition=" '$(BuildTaskAssemblyReference)' == '' ">Microsoft.Build.Tasks.Core</BuildTaskAssemblyReference>
    <CodeTaskFactoryAssemblyFile Condition=" '$(CodeTaskFactoryAssemblyFile)' == '' ">$(MSBuildToolsPath)\$(BuildTaskAssemblyReference).dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <!-- This task does not support concurrent execution from multiple project files. Its use is only appropriate when
        NuGet.exe is not in use. -->
  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <OutputFileName ParameterType="System.String" Required="true" />
      <MinimumVersion ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                Version minimumRequiredVersion;

                if (!Version.TryParse(MinimumVersion, out minimumRequiredVersion))
                {
                    Log.LogError("MinimumVersion '{0}' is not a valid Version.", MinimumVersion);
                    return false;
                }

                try
                {
                    OutputFileName = Path.GetFullPath(OutputFileName);

                    if (File.Exists(OutputFileName))
                    {
                        // If NuGet.exe exists but is less than the minimum required version, delete it so that the
                        // latest version will be downloaded.
                        FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(OutputFileName);

                        string toParse;

                        if (versionInfo != null && versionInfo.ProductVersion != null)
                        {
                            toParse = versionInfo.ProductVersion;
                            int index = toParse.IndexOfAny(new[] {'-', '+'});
                            if (index > 0)
                            {
                                toParse = toParse.Substring(0, index);
                            }
                        }
                        else
                        {
                            toParse = null;
                        }

                        Version current;
                        Version parsed;

                        if (toParse != null && Version.TryParse(toParse, out parsed))
                        {
                            current = parsed;
                        }
                        else
                        {
                            // Treat a missing or invalid version like V0.0 (which will trigger a delete and download).
                            current = new Version(0, 0);
                        }

                        if (current < minimumRequiredVersion)
                        {
                            File.Delete(OutputFileName);
                        }
                    }

                    if (!File.Exists(OutputFileName))
                    {
                        Log.LogMessage(MessageImportance.High, "Downloading latest version of NuGet.exe...");
                        WebClient webClient = new WebClient();
                        webClient.DownloadFile("https://dist.nuget.org/win-x86-commandline/latest/nuget.exe", OutputFileName);
                    }

                    return true;
                }
                catch (Exception ex)
                {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="PrintTestRunSummary" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <TestResultsDirectory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Text" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try
                {
                    string[] testResultFiles = Directory.GetFiles(TestResultsDirectory);
                    Regex regex = new Regex("&#x(?<char>[0-9A-Fa-f]+);",
                        RegexOptions.Multiline | RegexOptions.Compiled);
                    int testsPassed = 0;
                    int testsFailed = 0;
                    int testsSkipped = 0;
                    decimal timeSpent = 0;
                    List<string> testFailures = new List<string>();

                    foreach (string testResultFile in testResultFiles)
                    {
                        // Replace potentially illegal escaped characters (if they get through validations done during Save).
                        string fullPath = Path.GetFullPath(testResultFile);
                        string originalText = File.ReadAllText(fullPath);
                        bool matched = regex.IsMatch(originalText);

                        if (matched)
                        {
                            File.SetAttributes(fullPath, File.GetAttributes(fullPath) & ~FileAttributes.ReadOnly);
                            File.WriteAllText(fullPath, regex.Replace(originalText, "\0x${char}"), Encoding.UTF8);
                        }

                        // Collect test failure information from results file.
                        XElement xml;
                        using (FileStream fileStream = File.OpenRead(fullPath))
                        {
                            xml = XElement.Load(fileStream);
                        }

                        var assemblies = xml.Elements(XName.Get("assembly"));
                        foreach (XElement assembly in assemblies)
                        {
                            XAttribute failed = assembly.Attribute(XName.Get("failed"));
                            if (failed == null)
                            {
                                // Occasionally xUnit does not write information about test assembly completion.
                                XAttribute name = assembly.Attribute(XName.Get("name"));
                                Log.LogWarning(
                                    "No results in {0} for {1}.",
                                    testResultFile,
                                    name == null ? "unknown assembly" : name.Value);

                                continue;
                            }

                            int failures = Int32.Parse(failed.Value);
                            testsFailed += failures;

                            testsPassed += Int32.Parse(assembly.Attribute(XName.Get("passed")).Value);
                            testsSkipped += Int32.Parse(assembly.Attribute(XName.Get("skipped")).Value);
                            timeSpent += Decimal.Parse(assembly.Attribute(XName.Get("time")).Value);

                            if (failures > 0)
                            {
                                foreach (XElement classWithFailure in assembly.Elements(XName.Get("collection"))
                                    .Where(c => Int32.Parse(c.Attribute(XName.Get("failed")).Value) > 0))
                                {
                                    foreach (XElement failure in classWithFailure.Elements(XName.Get("test"))
                                        .Where(test => test.Attribute(XName.Get("result")).Value == "Fail"))
                                    {
                                        testFailures.Add(failure.Attribute("name").Value);
                                    }
                                }
                            }
                        }
                    }

                    // Log all test failures.
                    if (testFailures.Count > 0)
                    {
                        Log.LogMessage(MessageImportance.High, string.Empty);
                        Log.LogError("Tests failed...");
                        foreach (string testFailure in testFailures)
                        {
                            // Provide the list of failed tests but don't repeat it in the build summary. List
                            // is usually less helpful than errors from tests themselves (which are repeated)
                            // because those errors include the exact failure locations. On the other hand,
                            // this is more compact.
                            Log.LogMessage(MessageImportance.High, testFailure);
                        }
                    }

                    // Log summary of all results.
                    Log.LogMessage(MessageImportance.High, string.Empty);
                    Log.LogMessage(MessageImportance.High,
                        "Tests passed: {0}, Tests failed: {1}, Tests skipped: {2}",
                        testsPassed,
                        testsFailed,
                        testsSkipped);
                    Log.LogMessage(MessageImportance.High,
                        "Time spent running tests: {0} seconds", timeSpent);

                    return !Log.HasLoggedErrors;
                }
                catch (Exception ex)
                {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
